#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

[[ -f ~/.welcome_screen ]] && . ~/.welcome_screen

_set_my_PS1() {
    PS1='[\u@\h \W]\$ '
    if [ "$(whoami)" = "liveuser" ]; then
        local iso_version="$(grep ^VERSION= /usr/lib/endeavouros-release 2>/dev/null | cut -d '=' -f 2)"
        if [ "$iso_version" != "" ]; then
            local prefix="eos-"
            local iso_info="$prefix$iso_version"
            PS1="[\u@$iso_info \W]\$ "
        fi
    fi
}
_set_my_PS1
unset -f _set_my_PS1

ShowInstallerIsoInfo() {
    local file=/usr/lib/endeavouros-release
    if [ -r "$file" ]; then
        cat "$file"
    else
        echo "Sorry, installer ISO info is not available." >&2
    fi
}

alias ls='ls --color=auto'
alias ll='ls -lav --ignore=..' # show long listing of all except ".."
alias l='ls -lav --ignore=.?*' # show long listing but no hidden dotfiles except "."

[[ "$(whoami)" = "root" ]] && return

[[ -z "$FUNCNEST" ]] && export FUNCNEST=100 # limits recursive functions, see 'man bash'

## Use the up and down arrow keys for finding a command in history
## (you can write some initial letters of the command first).
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

################################################################################
## Some generally useful functions.
## Consider uncommenting aliases below to start using these functions.

_GeneralCmdCheck() {
    # A helper for functions UpdateArchPackages and UpdateAURPackages.

    echo "$@" >&2
    "$@" || {
        echo "Error: '$*' failed." >&2
        exit 1
    }
}

_CheckInternetConnection() {
    # curl --silent --connect-timeout 8 https://8.8.8.8 >/dev/null
    eos-connection-checker
    local result=$?
    test "$result" -eq 0 || echo "No internet connection!" >&2
    return "$result"
}

_CheckArchNews() {
    local conf=/etc/eos-update-notifier.conf

    if [ "$CheckArchNewsForYou" = "" ] && [ -r "$conf" ]; then
        source "$conf"
    fi

    if [ "$CheckArchNewsForYou" = "yes" ]; then
        local news="$(yay -Pw)"
        if [ "$news" != "" ]; then
            echo "Arch news:" >&2
            echo "$news" >&2
            echo "" >&2
            # read -p "Press ENTER to continue (or Ctrl-C to stop): "
        else
            echo "No Arch news." >&2
        fi
    fi
}

UpdateArchPackages() {
    # Updates Arch packages.

    _CheckInternetConnection || return 1

    _CheckArchNews

    #local updates="$(yay -Qu --repo)"
    local updates="$(checkupdates)"
    if [ "$updates" != "" ]; then
        echo "Updates from upstream:" >&2
        echo "$updates" | sed 's|^|    |' >&2
        _GeneralCmdCheck sudo pacman -Syu "$@"
        return 0
    else
        echo "No upstream updates." >&2
        return 1
    fi
}

UpdateAURPackages() {
    # Updates AUR packages.

    _CheckInternetConnection || return 1

    local updates
    if [ -x /usr/bin/yay ]; then
        updates="$(yay -Qua)"
        if [ "$updates" != "" ]; then
            echo "Updates from AUR:" >&2
            echo "$updates" | sed 's|^|    |' >&2
            _GeneralCmdCheck yay -Syua "$@"
        else
            echo "No AUR updates." >&2
        fi
    else
        echo "Warning: /usr/bin/yay does not exist." >&2
    fi
}

UpdateAllPackages() {
    # Updates all packages in the system.
    # Upstream (i.e. Arch) packages are updated first.
    # If there are Arch updates, you should run
    # this function a second time to update
    # the AUR packages too.

    UpdateArchPackages || UpdateAURPackages
}

_open_files_for_editing() {
    # Open any given document file(s) for editing (or just viewing).
    # Note1: Do not use for executable files!
    # Note2: uses mime bindings, so you may need to use
    #        e.g. a file manager to make some file bindings.

    if [ -x /usr/bin/exo-open ]; then
        echo "exo-open $*" >&2
        /usr/bin/exo-open "$@" >&/dev/null &
        return
    fi
    if [ -x /usr/bin/xdg-open ]; then
        for file in "$@"; do
            echo "xdg-open $file" >&2
            /usr/bin/xdg-open "$file" >&/dev/null &
        done
        return
    fi

    echo "Sorry, none of programs [$progs] is found." >&2
    echo "Tip: install one of packages" >&2
    for prog in "${progs[@]}"; do
        echo "    $(pacman -Qqo "$prog")" >&2
    done
}

#------------------------------------------------------------

## Aliases for the functions above.
## Uncomment an alias if you want to use it.
##

alias ef='_open_files_for_editing' # 'ef' opens given file(s) for editing

## Other potentially useful aliases.
#
# alias pacdiff=eos-pacdiff
################################################################################
############################## MANUAL CONFIG STARTS  ##############################

# Starship | https://starship.rs
eval "$(starship init bash)"

# Zoxide | https://github.com/ajeetdsouza/zoxide
eval "$(zoxide init bash)"

# My Aliases
alias c="clear"
alias ..="cd .."
alias mkdir="mkdir -pv"
alias tarc="tar -czvf"
alias tare="tar -xzvf"
alias src="source ~/.bashrc"
alias ocr="tesseract"
alias clip="xclip -sel clip"
alias py="python3"
alias muza="mpv --shuffle --no-audio-display /run/media/$USER/Seagate\ Expansion\ Drive/Music/Favourites/"
alias nv="nvim"
#alias pytest="python3 -m pytest -o markers=task"
alias pyupdate="pip list --outdated | tail -n +3 | awk '{print $1}' | xargs pip install -U --break-system-packages"
alias play='mpv --shuffle --loop-playlist *.flac'
alias a='apropos'
alias gameon='gamemoded'
alias prime-run='__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia'
#alias ffmpeg_concat='for f in *.mp4; do echo "file $f" >> videos.txt; done && ffmpeg -f concat -i videos.txt -c copy output.mp4"
alias rbe='BROWSER=brave rustup doc --rust-by-example'

# RUSTY COMMANDS
alias p="paru"
alias yeet="paru -Rcs"
alias cat="bat"
alias grep="rg"
alias ls="lsd -A"
alias cf='cargo fmt'
alias cc='cargo clippy'
alias ct='cargo test -- --include-ignored'
alias crab='cargo clippy; cargo fmt; cargo test -- --include-ignored'
# alias find="fd"
alias cd="z"
alias rustfmt='rustfmt --edition 2021'
alias tg='topgrade'
alias diff='difft'
alias grep='rg'
alias btm='btm --mem_as_value'
alias oxi='oxipng -o 4 -i 1 --strip safe'
alias rust='evcxr'
alias rs='evcxr'
alias xcd='cd "$(xplr --print-pwd-as-result)"'
# alias 'cargo clippy'='cargo clippy --fix -- -W clippy:pedantic -W clippy::nursery -W clippy::unwrap_used -W clippy::expect_used'
alias cache='pip cache purge && paccache -rk 1 && paru -Scc'
alias gh-md='gh markdown-preview --dark-mode'

gt() {
    if cmp -s <(go run code.go) expected.txt; then
        # Array of success messages
        success_msgs=("Nailed it! 🎯" "You're a Go superstar! 🌟" "You got it, dude! 🤙" "BOOM! Nailed it. 💥" "Who's awesome? You're awesome! 😎")

        # Pick a random success message
        random_success_msg=${success_msgs[RANDOM % ${#success_msgs[@]}]}

        echo "Good: $random_success_msg"
    else
        # Array of error messages
        error_msgs=("Oops! Try again. 🙈" "Not quite there. Keep going! 💪" "Close but no cigar! 🚬" "Hmm, something's fishy. 🐟" "Yikes! Back to the drawing board. 🎨")

        # Pick a random error message
        random_error_msg=${error_msgs[RANDOM % ${#error_msgs[@]}]}

        echo "Bad: $random_error_msg"
    fi
}

# PATHS
export PATH=$PATH:~/.local/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/Documents/sh
export PATH=$PATH:~/my_scripts
export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

# VARIABLES
FCC=~/Documents/GitHub/freeCodeCamp/
RUST=~/Documents/rust-course-data/exercises/activities/
export BROWSER=/usr/bin/librewolf
export DOTNET_CLI_TELEMETRY_OPTOUT=1
. "$HOME/.cargo/env"

# FLUTTER FUN
export CHROME_EXECUTABLE=brave
export ANDROID_SDK_ROOT="/opt/android-sdk"
export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
export PATH="/opt/flutter/bin:$PATH"

# CUDA
export PATH=/opt/cuda/bin:$PATH
export LD_LIBRARY_PATH=/opt/cuda/lib64:$LD_LIBRARY_PATH

# Exercism test
bats() {
    BATS_RUN_SKIPPED=true command bats *.bats
}

HISTSIZE=5000
HISTFILESIZE=5000
# [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
# eval "$(atuin init bash)"

# Zsh features

# Add better autocompletion support
if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
fi

# Simple Bash prompt customization
PS1='\u@\h:\w\$ '

# Source custom shortcuts and functions
if [ -f ~/.bash_shortcuts ]; then
    source ~/.bash_shortcuts
fi
